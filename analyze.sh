#!/bin/bash

RESULTS_DIR="results"
DATE=$(date +%Y-%m-%d)
TOOLS=(
    "dieharder:dieharder"
    "ent:ent"
    "testu01:testu01-tcode"
    "nist_800_22:./analysis/nist_800_22/assess"
    #"nist_800_90b:python ../../SP800-90B_EntropyAssessment/python/ea_iid.py"
)

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# Setup results dir if it doesn't exist
mkdir -p "$RESULTS_DIR"

check_dependencies() {
    for tool_entry in "${TOOLS[@]}"; do
        IFS=':' read -r _ cmd <<< "$tool_entry"
        command -v ${cmd%% *} >/dev/null 2>&1 || { echo >&2 "Required tool ${cmd%% *} not found"; exit 1; }
    done
}

analyze_file() {
    local INPUT_FILE="$1"
    local RNG_NAME=$(basename "$INPUT_FILE" .bin)
    
    log "Analyzing $RNG_NAME"
    
    if [ ! -s "$INPUT_FILE" ]; then
        log "Error: Input file is empty or doesn't exist: $INPUT_FILE"
        return 1
    fi
    
    # Create subdirectory for this analysis
    local ANALYSIS_DIR="$RESULTS_DIR/$RNG_NAME"
    mkdir -p "$ANALYSIS_DIR"
    
    # Run tests
    TOTAL_TOOLS=${#TOOLS[@]}
    CURRENT_TOOL=0
    log "Starting analysis with $TOTAL_TOOLS tools"
    
    for tool_entry in "${TOOLS[@]}"; do
        IFS=':' read -r name cmd <<< "$tool_entry"
        output_file="$ANALYSIS_DIR/${name}.txt"
        
        ((CURRENT_TOOL++))
        log "[$CURRENT_TOOL/$TOTAL_TOOLS] Running $name"
        
        case $name in
            "dieharder")
                log "Running Dieharder"
                $cmd -a -g 201 -f "$INPUT_FILE" | tee "$output_file"
                ;;
            "ent")
                log "Running ENT"
                $cmd "$INPUT_FILE" > "$output_file" | tee "$output_file"
                ;;
            "testu01")
                log "Running TestU01"
                $cmd -smallcrush -i "$INPUT_FILE" > "$output_file" | tee "$output_file"
                ;;
            "nist_800_22")
                log "Running NIST 800-22 (interactive mode)"
                echo "Please interact with the NIST program directly..."
                $cmd 1000000
                echo "Once finished, press Enter to continue..."
                read
                ;;
            "nist_800_90b")
                log "Running NIST SP800-90B"
                $cmd "$INPUT_FILE" > "$output_file" 2>/dev/null
                ;;
        esac
    done

    # Build report
    log "Building report for $RNG_NAME"
    REPORT="# OpenRandomness Test Report: $RNG_NAME\n"
    REPORT+="**Date**: $DATE\n\n"

    for tool_entry in "${TOOLS[@]}"; do
        IFS=':' read -r name _ <<< "$tool_entry"
        local tool_output="$ANALYSIS_DIR/${name}.txt"
        REPORT+="## $(echo $name | tr '[:lower:]' '[:upper:]' | sed 's/_/ /g') Results\n"
        REPORT+="\`\`\`\n"
        REPORT+=$(cat "$tool_output")
        REPORT+="\n\`\`\`\n\n"
    done

    REPORT+="---\nGenerated by OpenRandomness. See github.com/cgshep/OpenRandomness for details.\n"

    # Save report
    OUTPUT_FILE="$ANALYSIS_DIR/report_${DATE}.md"
    echo -e "$REPORT" > "$OUTPUT_FILE"
    log "Report saved to: $OUTPUT_FILE"
}

cleanup() {
    [ -f nist_config.txt ] && rm nist_config.txt
}
trap cleanup EXIT

# Check dependencies first
check_dependencies

# Process all files or single file
if [ $# -eq 0 ]; then
    # No arguments - look for .bin files in data directory
    for file in data/*.bin; do
        [ -f "$file" ] || continue
        analyze_file "$file"
    done
elif [ $# -eq 1 ]; then
    # Single file argument
    analyze_file "$1"
else
    echo "Usage: $0 [path_to_bin_file]"
    echo "If no file specified, analyzes all .bin files in data directory"
    exit 1
fi
